{"version":3,"sources":["theme.js","components/NavigationBar.js","components/ListItem.js","store/actions.js","components/CategoryButtons.js","containers/TitleAndInput.js","containers/ToDoList.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["theme","defaultTheme","colors","cyan","50","100","200","300","400","500","600","700","800","900","leafGreen","palePink","cottonCandyPink","mauve","violet","NavigationBar","useColorMode","colorMode","toggleColorMode","Flex","flexDirection","backgroundColor","border","borderColor","borderBottomColor","textAlign","width","padding","position","zIndex","Button","color","leftIcon","FaHeart","size","marginLeft","onClick","_hover","_active","_focus","boxShadow","IconButton","icon","GoMarkGithub","window","open","connect","state","list","allTaskList","dispatch","onDeleteTask","id","type","taskId","onClickCheckbox","props","background","justifyContent","alignItems","right","borderRadius","margin","Checkbox","variantColor","paddingRight","isChecked","done","onChange","Text","fontSize","fontFamily","overflowWrap","text","aria-label","display","light","dark","currentCol","currentColumn","visibleList","visibleTaskList","onClickToDo","onClickDone","onClickAll","bgColor","selectedBgColor","hoverColor","selectedHoverColor","activeColor","selectedActiveColor","left","FaListUl","newText","newTaskText","allList","onEnterNewTaskText","onAddTask","Input","placeholder","focusBorderColor","value","event","target","_placeholder","style","borderWidth","marginBottom","WebkitOverflowScrolling","height","top","transform","overflowY","overflow","minHeight","length","map","listItem","key","App","ThemeProvider","CSSReset","className","Boolean","location","hostname","match","initialState","reducer","action","newAllTaskList","concat","Date","newVisTaskList","filter","task","updatedTaskList","updatedVisibleTaskList","item","find","index","indexOf","newTaskList","slice","newVisibleTaskList","newToDoList","newDoneList","store","createStore","ReactDOM","render","ColorModeProvider","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0ba8fda8.chunk.js","sourcesContent":["import { theme as defaultTheme } from \"@chakra-ui/core\";\n\nconst theme = {\n  ...defaultTheme,\n  colors: {\n    ...defaultTheme.colors,\n    cyan: {\n      50: \"#EDFDFD\",\n      100: \"#C4F1F9\",\n      200: \"#00A3C4\",\n      300: \"#76E4F7\",\n      400: \"#0BC5EA\",\n      500: \"#00B5D8\",\n      600: \"#00A3C4\",\n      700: \"#0987A0\",\n      800: \"#086F83\",\n      900: \"#065666\",\n    },\n    leafGreen: {\n      50: \"#eeefed\",\n      100: \"#dddfdb\",\n      200: \"#babfb6\",\n      300: \"#989e92\",\n      400: \"#757e6d\",\n      500: \"#535e49\",\n      600: \"#424b3a\",\n      700: \"#32382c\",\n      800: \"#21261d\",\n      900: \"#11130f\",\n    },\n    palePink: {\n      50: \"#fefcfd\",\n      100: \"#fef9fa\",\n      200: \"#fdf3f5\",\n      300: \"#fbedf0\",\n      400: \"#fae7eb\",\n      500: \"#f9e1e6\",\n      600: \"#c7b4b8\",\n      700: \"#95878a\",\n      800: \"#645a5c\",\n      900: \"#322d2e\",\n    },\n    cottonCandyPink: {\n      50: \"#fef8fa\",\n      100: \"#fef1f6\",\n      200: \"#fce4ec\",\n      300: \"#fbd6e3\",\n      400: \"#f9c9d9\",\n      500: \"#f8bbd0\",\n      600: \"#c696a6\",\n      700: \"#95707d\",\n      800: \"#634b53\",\n      900: \"#32252a\",\n    },\n    mauve: {\n      50: \"#f7f1f4\",\n      100: \"#efe2e8\",\n      200: \"#dfc5d1\",\n      300: \"#d0a9bb\",\n      400: \"#c08ca4\",\n      500: \"#b06f8d\",\n      600: \"#8d5971\",\n      700: \"#6a4355\",\n      800: \"#462c38\",\n      900: \"#23161c\",\n    },\n    violet: {\n      50: \"#f1ecf0\",\n      100: \"#e2d8e0\",\n      200: \"#c5b1c1\",\n      300: \"#a88aa3\",\n      400: \"#8b6384\",\n      500: \"#6e3c65\",\n      600: \"#583051\",\n      700: \"#42243d\",\n      800: \"#42243d\",\n      900: \"#160c14\",\n    },\n  },\n};\n\nexport default theme;\n","import React from \"react\";\nimport { IconButton, Button, Flex, useColorMode } from \"@chakra-ui/core\";\nimport { GoMarkGithub } from \"react-icons/go\";\nimport { FaHeart } from \"react-icons/fa\";\n\nconst NavigationBar = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  return (\n    <Flex\n      flexDirection=\"row\"\n      backgroundColor={[\n        colorMode === \"light\" ? \"cottonCandyPink.500\" : \"transparent\",\n        \"transparent\",\n      ]}\n      border=\"4px solid\"\n      borderColor={[\n        colorMode === \"light\" ? \"transparent\" : \"gray.600\",\n        \"transparent\",\n      ]}\n      borderBottomColor=\"transparent\"\n      textAlign=\"right\"\n      width=\"100%\"\n      padding={[\"2px\", \"6px\"]}\n      position=\"relative\"\n      zIndex=\"999\"\n    >\n      <Button\n        backgroundColor={colorMode === \"light\" ? \"violet.500\" : \"cyan.700\"}\n        color=\"white\"\n        leftIcon={colorMode === \"light\" ? \"moon\" : FaHeart}\n        size=\"sm\"\n        marginLeft=\"auto\"\n        zIndex=\"999\"\n        onClick={toggleColorMode}\n        _hover={{\n          backgroundColor: colorMode === \"light\" ? \"violet.600\" : \"cyan.800\",\n        }}\n        _active={{\n          backgroundColor: colorMode === \"light\" ? \"violet.300\" : \"cyan.500\",\n        }}\n        _focus={{\n          boxShadow:\n            colorMode === \"light\" ? \"0 0 0 2px #a88aa3\" : \"0 0 0 2px #00A3C4\",\n        }}\n      >\n        {colorMode === \"light\" ? \"Dark\" : \"Pink\"} Mode\n      </Button>\n      <IconButton\n        backgroundColor={colorMode === \"light\" ? \"leafGreen.500\" : \"gray.500\"}\n        color=\"white\"\n        icon={GoMarkGithub}\n        size=\"sm\"\n        marginLeft=\"6px\"\n        zIndex=\"999\"\n        onClick={() =>\n          window.open(\"https://github.com/briannamcdonald/react-to-do-list\")\n        }\n        _hover={{\n          backgroundColor: colorMode === \"light\" ? \"leafGreen.600\" : \"gray.600\",\n        }}\n        _active={{\n          backgroundColor: colorMode === \"light\" ? \"leafGreen.300\" : \"gray.300\",\n        }}\n        _focus={{\n          boxShadow:\n            colorMode === \"light\" ? \"0 0 0 2px #989e92\" : \"0 0 0 2px #A0AEC0\",\n        }}\n      ></IconButton>\n    </Flex>\n  );\n};\n\nexport default NavigationBar;\n","import React from \"react\";\nimport {\n  Checkbox,\n  Text,\n  IconButton,\n  useColorMode,\n  Flex,\n} from \"@chakra-ui/core\";\nimport { connect } from \"react-redux\";\n\nimport * as actionTypes from \"./../store/actions\";\n\nconst ListItem = (props) => {\n  const { colorMode } = useColorMode();\n\n  const buttonColorModeStyling = {\n    light: {\n      backgroundColor: \"leafGreen.500\",\n      _hover: { backgroundColor: \"leafGreen.600\" },\n      _active: { backgroundColor: \"leafGreen.300\" },\n      _focus: { boxShadow: \"0 0 0 2px #989e92\" },\n    },\n    dark: {\n      backgroundColor: \"cyan.600\",\n      _hover: { backgroundColor: \"cyan.700\" },\n      _active: { backgroundColor: \"cyan.400\" },\n      _focus: { boxShadow: \"0 0 0 2px #4A5568\" },\n    },\n  };\n\n  return (\n    <Flex\n      flexDirection=\"row\"\n      background={colorMode === \"light\" ? \"#f8bbd0\" : \"#4A5568\"}\n      width=\"100%\"\n      justifyContent=\"space-around\"\n      alignItems=\"center\"\n      position=\"relative\"\n      right=\"4px\"\n      border={colorMode === \"light\" ? \"2px solid #e6aec1\" : \"2px solid #718096\"}\n      borderRadius=\"6px\"\n      boxShadow={\n        colorMode === \"light\" ? \"2px 2px 2px #cd82a4\" : \"2px 2px 2px #A0AEC0\"\n      }\n      margin=\"4px\"\n    >\n      <Checkbox\n        variantColor={colorMode === \"light\" ? \"leafGreen\" : \"cyan\"}\n        borderColor={colorMode === \"light\" ? \"leafGreen.500\" : \"cyan.600\"}\n        color=\"white\"\n        size=\"lg\"\n        margin=\"6px 6px 6px 20px\"\n        paddingRight=\"6px\"\n        isChecked={props.done}\n        onChange={() => props.onClickCheckbox(props.id)}\n      ></Checkbox>\n      <Text\n        color={colorMode === \"light\" ? \"gray.800\" : \"white\"}\n        fontSize={[\"2xl\", \"xl\", \"xl\", \"lg\"]}\n        fontFamily=\"Trebuchet MS\"\n        margin=\"6px auto\"\n        overflowWrap=\"break-word\"\n      >\n        {props.text}\n      </Text>\n      <IconButton\n        color=\"white\"\n        size=\"xs\"\n        aria-label=\"Delete item\"\n        icon=\"delete\"\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        margin={[\"2px 12px 2px 6px\", \"6px 20px 6px 11px\"]}\n        onClick={() => props.onDeleteTask(props.id)}\n        {...buttonColorModeStyling[colorMode]}\n      />\n    </Flex>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    list: state.allTaskList,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onDeleteTask: (id) =>\n      dispatch({ type: actionTypes.DELETE_TASK, taskId: id }),\n    onClickCheckbox: (id) =>\n      dispatch({ type: actionTypes.CLICK_CHECKBOX, taskId: id }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListItem);\n","export const ENTER_NEW_TASK_TEXT = 'ENTER_NEW_TASK_TEXT';\nexport const ADD_TASK = 'ADD_TASK';\nexport const DELETE_TASK = 'DELETE_TASK';\nexport const CLICK_CHECKBOX = 'CLICK_CHECKBOX';\nexport const CLICK_TO_DO = 'CLICK_TO_DO';\nexport const CLICK_DONE = 'CLICK_DONE';\nexport const CLICK_ALL = 'CLICK_ALL';","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Flex, useColorMode } from \"@chakra-ui/core\";\nimport { FaListUl } from \"react-icons/fa\";\n\nimport * as actionTypes from \"./../store/actions\";\n\nconst CategoryButtons = (props) => {\n  const { colorMode } = useColorMode();\n  const bgColor = { light: \"mauve.500\", dark: \"gray.600\" };\n  const selectedBgColor = { light: \"violet.500\", dark: \"cyan.700\" };\n  const hoverColor = { light: \"mauve.600\", dark: \"gray.700\" };\n  const selectedHoverColor = { light: \"violet.600\", dark: \"cyan.800\" };\n  const activeColor = { light: \"mauve.300\", dark: \"gray.400\" };\n  const selectedActiveColor = { light: \"violet.300\", dark: \"cyan.500\" };\n\n  return (\n    <Flex\n      flexDirection=\"row\"\n      width=\"100%\"\n      margin=\"2px auto 6px auto\"\n      justifyContent=\"center\"\n      position=\"relative\"\n      left={[\"0\", \"4px\"]}\n    >\n      <Button\n        backgroundColor={\n          props.currentCol === \"to do\"\n            ? selectedBgColor[colorMode]\n            : bgColor[colorMode]\n        }\n        color=\"white\"\n        width=\"33%\"\n        margin={[\"2px 1px\", \"2px\"]}\n        fontSize={[\"xl\", \"lg\", \"lg\", \"md\"]}\n        leftIcon=\"calendar\"\n        onClick={props.onClickToDo}\n        _hover={{\n          backgroundColor:\n            props.currentCol === \"to do\"\n              ? selectedHoverColor[colorMode]\n              : hoverColor[colorMode],\n        }}\n        _active={{\n          backgroundColor:\n            props.currentCol === \"to do\"\n              ? selectedActiveColor[colorMode]\n              : activeColor[colorMode],\n        }}\n        _focus={{\n          boxShadow:\n            colorMode === \"light\" ? \"0 0 0 2px #a88aa3\" : \"0 0 0 2px #00A3C4\",\n        }}\n      >\n        To Do\n      </Button>\n      <Button\n        backgroundColor={\n          props.currentCol === \"done\"\n            ? selectedBgColor[colorMode]\n            : bgColor[colorMode]\n        }\n        color=\"white\"\n        width=\"33%\"\n        margin={[\"2px 1px\", \"2px\"]}\n        fontSize={[\"xl\", \"lg\", \"lg\", \"md\"]}\n        leftIcon=\"check-circle\"\n        onClick={props.onClickDone}\n        _hover={{\n          backgroundColor:\n            props.currentCol === \"done\"\n              ? selectedHoverColor[colorMode]\n              : hoverColor[colorMode],\n        }}\n        _active={{\n          backgroundColor:\n            props.currentCol === \"done\"\n              ? selectedActiveColor[colorMode]\n              : activeColor[colorMode],\n        }}\n        _focus={{\n          boxShadow:\n            colorMode === \"light\" ? \"0 0 0 2px #a88aa3\" : \"0 0 0 2px #00A3C4\",\n        }}\n      >\n        Done\n      </Button>\n      <Button\n        backgroundColor={\n          props.currentCol === \"all\"\n            ? selectedBgColor[colorMode]\n            : bgColor[colorMode]\n        }\n        color=\"white\"\n        width=\"33%\"\n        margin={[\"2px 1px\", \"2px\"]}\n        fontSize={[\"xl\", \"lg\", \"lg\", \"md\"]}\n        leftIcon={FaListUl}\n        onClick={props.onClickAll}\n        _hover={{\n          backgroundColor:\n            props.currentCol === \"all\"\n              ? selectedHoverColor[colorMode]\n              : hoverColor[colorMode],\n        }}\n        _active={{\n          backgroundColor:\n            props.currentCol === \"all\"\n              ? selectedActiveColor[colorMode]\n              : activeColor[colorMode],\n        }}\n        _focus={{\n          boxShadow:\n            colorMode === \"light\" ? \"0 0 0 2px #a88aa3\" : \"0 0 0 2px #00A3C4\",\n        }}\n      >\n        All Tasks\n      </Button>\n    </Flex>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentCol: state.currentColumn,\n    list: state.allTaskList,\n    visibleList: state.visibleTaskList,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onClickToDo: () => dispatch({ type: actionTypes.CLICK_TO_DO }),\n    onClickDone: () => dispatch({ type: actionTypes.CLICK_DONE }),\n    onClickAll: () => dispatch({ type: actionTypes.CLICK_ALL }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryButtons);\n","import React from \"react\";\nimport { Text, Input, Button, Flex, useColorMode } from \"@chakra-ui/core\";\nimport { connect } from \"react-redux\";\n\nimport * as actionTypes from \"./../store/actions\";\n\nconst TitleAndInput = (props) => {\n  const { colorMode } = useColorMode();\n  const buttonColorModeStyling = {\n    light: {\n      backgroundColor: \"mauve.500\",\n      _hover: { backgroundColor: \"mauve.600\" },\n      _active: { backgroundColor: \"mauve.300\" },\n      _focus: { boxShadow: \"0 0 0 2px #d0a9bb\" },\n    },\n    dark: {\n      backgroundColor: \"gray.600\",\n      _hover: { backgroundColor: \"gray.700\" },\n      _active: { backgroundColor: \"gray.400\" },\n      _focus: { boxShadow: \"0 0 0 2px #00A3C4\" },\n    },\n  };\n\n  return (\n    <div>\n      <b>\n        <Text\n          color={colorMode === \"light\" ? \"gray.700\" : \"gray.100\"}\n          fontSize={[\"4xl\", \"4xl\", \"4xl\", \"3xl\"]}\n          fontFamily=\"Trebuchet MS\"\n          margin=\"8px\"\n        >\n          To-Do List\n        </Text>\n      </b>\n      <Flex\n        flexDirection=\"row\"\n        width={[\"calc(100% - 14px)\", \"85%\"]}\n        margin=\"0 auto\"\n        position=\"relative\"\n        right=\"4px\"\n      >\n        <Input\n          placeholder=\"Enter a new task...\"\n          backgroundColor={colorMode === \"light\" ? \"white\" : \"gray.100\"}\n          borderColor=\"gray.200\"\n          color=\"gray.700\"\n          focusBorderColor={colorMode === \"light\" ? \"violet.300\" : \"cyan.700\"}\n          margin=\"8px 1px\"\n          fontSize={[\"xl\", \"lg\", \"lg\", \"md\"]}\n          position=\"relative\"\n          left=\"4px\"\n          value={props.newText}\n          onChange={(event) => props.onEnterNewTaskText(event.target.value)}\n          _placeholder={{\n            color: colorMode === \"light\" ? \"gray.400\" : \"gray.500\",\n            fontSize: [\"xl\", \"lg\", \"lg\", \"md\"],\n          }}\n        />\n        <Button\n          color=\"white\"\n          margin=\"8px 1px\"\n          fontSize={[\"xl\", \"lg\", \"lg\", \"md\"]}\n          position=\"relative\"\n          left=\"4px\"\n          onClick={props.onAddTask}\n          {...buttonColorModeStyling[colorMode]}\n        >\n          Add Task\n        </Button>\n      </Flex>\n      <hr\n        style={{\n          borderWidth: \"1px\",\n          margin: \"8px\",\n          marginBottom: \"10px\",\n          borderColor: colorMode === \"light\" ? \"#f8bbd0\" : \"#4A5568\",\n        }}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    newText: state.newTaskText,\n    allList: state.allTaskList,\n    visibleList: state.visibleTaskList,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onEnterNewTaskText: (text) =>\n      dispatch({ type: actionTypes.ENTER_NEW_TASK_TEXT, newText: text }),\n    onAddTask: () => dispatch({ type: actionTypes.ADD_TASK }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TitleAndInput);\n","import React from \"react\";\nimport { Text, Flex, useColorMode } from \"@chakra-ui/core\";\nimport { connect } from \"react-redux\";\n\nimport NavigationBar from \"./../components/NavigationBar\";\nimport ListItem from \"./../components/ListItem\";\nimport CategoryButtons from \"./../components/CategoryButtons\";\nimport TitleAndInput from \"./TitleAndInput\";\n\nconst ToDoList = (props) => {\n  /*  Checks if visibleList is undefined and if so, maps from the allList instead. \n      This is done to avoid errors when the app first starts up.  */\n  const getList = () => {\n    let list = [];\n    if (!props.visibleList) {\n      list = props.allList;\n    } else {\n      list = props.visibleList;\n    }\n    return list;\n  };\n\n  const { colorMode } = useColorMode();\n\n  return (\n    <div>\n      <NavigationBar />\n      <Flex\n        style={{ WebkitOverflowScrolling: \"touch\" }}\n        flexDirection=\"column\"\n        width={[\"100%\", \"80%\", \"60%\", \"45%\"]}\n        height={[\n          \"calc(100% - 40px)\",\n          \"calc(100% - 30px)\",\n          \"calc(100% - 20px)\",\n          \"calc(100% - 8px)\",\n        ]}\n        borderRadius={[\"0\", \"8px\"]}\n        position=\"absolute\"\n        left={[\"0\", \"50%\"]}\n        top={[\"40px\", \"50%\"]}\n        transform={[\"none\", \"translate(-50%, -50%)\"]}\n        overflowY=\"scroll\"\n        overflow=\"scroll\"\n        backgroundColor={colorMode === \"light\" ? \"#f9e1e6\" : \"#1A202C\"}\n        border={\n          colorMode === \"light\" ? \"4px solid #f8bbd0\" : \"4px solid #4A5568\"\n        }\n      >\n        <div style={{ minHeight: \"101%\" }}>\n          <TitleAndInput />\n          <Flex\n            flexDirection=\"column\"\n            width={[\"calc(100% - 14px)\", \"85%\"]}\n            margin=\"0 auto\"\n          >\n            <CategoryButtons />\n            <div\n              style={{\n                display: props.allList.length === 0 ? \"block\" : \"none\",\n              }}\n            >\n              <Flex\n                height=\"100%\"\n                position=\"relative\"\n                left=\"4px\"\n                top=\"25vh\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n              >\n                <Text\n                  color={colorMode === \"light\" ? \"gray.700\" : \"gray.100\"}\n                  fontSize={[\"2xl\", \"2xl\", \"2xl\", \"xl\"]}\n                  fontFamily=\"Trebuchet MS\"\n                >\n                  Start adding tasks!\n                </Text>\n              </Flex>\n            </div>\n            {getList().map((listItem) => (\n              <ListItem\n                key={listItem.key}\n                id={listItem.id}\n                text={listItem.text}\n                done={listItem.done}\n              />\n            ))}\n          </Flex>\n        </div>\n      </Flex>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    allList: state.allTaskList,\n    visibleList: state.visibleTaskList,\n  };\n};\n\nexport default connect(mapStateToProps)(ToDoList);\n","import React from \"react\";\nimport \"./App.css\";\nimport { ThemeProvider, CSSReset } from \"@chakra-ui/core\";\nimport theme from \"./theme\";\n\nimport ToDoList from \"./containers/ToDoList\";\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CSSReset />\n      <div className=\"App\">\n        <ToDoList />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../store/actions';\n\nconst initialState = {\n    newTaskText: \"\",\n    currentColumn: \"all\",\n    allTaskList: [],\n    visibleTaskList: []\n}\n\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case actionTypes.ENTER_NEW_TASK_TEXT:\n            return {\n                ...state,\n                newTaskText: action.newText\n            };\n        case actionTypes.ADD_TASK:\n            // add it to the allTaskList\n            const newAllTaskList = state.allTaskList.concat({\n                key: new Date(),\n                id: new Date(),\n                text: state.newTaskText,\n                done: false\n            })\n            // find out which column is currently visible and update visibleTaskList accordingly\n            let newVisTaskList = [];\n            if(state.currentColumn === \"all\") {\n                newVisTaskList = newAllTaskList;\n            }\n            else if(state.currentColumn === \"to do\") {\n                newVisTaskList = newAllTaskList.filter(task => !task.done);\n            }\n            else if(state.currentColumn === \"done\") {\n                newVisTaskList = newAllTaskList.filter(task => task.done);\n            }\n            else {\n                newVisTaskList = newAllTaskList;\n            }\n\n            return {\n                ...state,\n                newTaskText: \"\",\n                allTaskList: newAllTaskList,\n                visibleTaskList: newVisTaskList\n            };\n        case actionTypes.DELETE_TASK:\n            // remove it from the allTaskList\n            const updatedTaskList = state.allTaskList.filter(task => task.id !== action.taskId);\n            // find out which column is currently visible and update visibleTaskList accordingly\n            let updatedVisibleTaskList = [];\n            if(state.currentColumn === \"all\") {\n                updatedVisibleTaskList = updatedTaskList;\n            }\n            else if(state.currentColumn === \"to do\") {\n                updatedVisibleTaskList = updatedTaskList.filter(task => !task.done);\n            }\n            else if(state.currentColumn === \"done\") {\n                updatedVisibleTaskList = updatedTaskList.filter(task => task.done);\n            }\n            else {\n                updatedVisibleTaskList = updatedTaskList;\n            }\n\n            return {\n                ...state,\n                allTaskList: updatedTaskList,\n                visibleTaskList: updatedVisibleTaskList\n            };\n        case actionTypes.CLICK_CHECKBOX:\n            // find the item in the list that matches the id given\n            const item = state.allTaskList.find(listItem => listItem.id === action.taskId);\n            // find the index of that item\n            const index = state.allTaskList.indexOf(item);\n            // update the done property of the item to be opposite to what it was before in the allTaskList\n            const newTaskList = [\n                ...state.allTaskList.slice(0, index),\n                {\n                    ...state.allTaskList[index],\n                    done: !state.allTaskList[index].done,\n                },\n                ...state.allTaskList.slice(index + 1)\n            ]\n\n            // find out which column is currently visible and update visibleTaskList accordingly\n            let newVisibleTaskList = [];\n            if(state.currentColumn === \"all\") {\n                newVisibleTaskList = newTaskList;\n            }\n            else if(state.currentColumn === \"to do\") {\n                newVisibleTaskList = newTaskList.filter(task => !task.done);\n            }\n            else if(state.currentColumn === \"done\") {\n                newVisibleTaskList = newTaskList.filter(task => task.done);\n            }\n            else {\n                newVisibleTaskList = newTaskList;\n            }\n\n            return {\n                ...state,\n                allTaskList: newTaskList,\n                visibleTaskList: newVisibleTaskList\n            }\n        case actionTypes.CLICK_TO_DO:\n            const newToDoList = state.allTaskList.filter(task => !task.done);\n            return {\n                ...state,\n                currentColumn: \"to do\",\n                visibleTaskList: newToDoList\n            }\n        case actionTypes.CLICK_DONE:\n            const newDoneList = state.allTaskList.filter(task => task.done);\n            return {\n                ...state,\n                currentColumn: \"done\",\n                visibleTaskList: newDoneList\n            }\n        case actionTypes.CLICK_ALL:\n            return {\n                ...state,\n                currentColumn: \"all\",\n                visibleTaskList: state.allTaskList\n            }\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport { ColorModeProvider } from '@chakra-ui/core';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducer';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <ColorModeProvider>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </ColorModeProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}